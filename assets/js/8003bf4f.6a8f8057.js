(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{100:function(e,t,a){"use strict";a.d(t,"a",(function(){return h}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(a),h=n,m=u["".concat(i,".").concat(h)]||u[h]||p[h]||o;return a?r.a.createElement(m,c(c({ref:t},l),{},{components:a})):r.a.createElement(m,c({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},81:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),o=(a(0),a(100)),i={title:"Track Upload Status",id:"tags"},c={unversionedId:"advanced/tags",id:"advanced/tags",isDocsHomePage:!1,title:"Track Upload Status",description:"In Swarm, an instruction to upload data to the network goes through 3 consecutive stages before it is completed:",source:"@site/docs/advanced/tags.md",slug:"/advanced/tags",permalink:"/docs/advanced/tags",editUrl:"https://github.com/ethersphere/docs.github.io/blob/master/docs/advanced/tags.md",version:"current",sidebar:"Balls",previous:{title:"PSS Messaging",permalink:"/docs/advanced/pss"},next:{title:"Persistence",permalink:"/docs/advanced/persistence"}},s=[{value:"How to track the status of your upload",id:"how-to-track-the-status-of-your-upload",children:[{value:"Generate the tag identifier",id:"generate-the-tag-identifier",children:[]},{value:"Ask for the Current Status",id:"ask-for-the-current-status",children:[]}]}],l={toc:s};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.a)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.a)("p",null,"In Swarm, an instruction to upload data to the network goes through 3 consecutive stages before it is completed:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Splitting"),Object(o.a)("li",{parentName:"ul"},"Storing"),Object(o.a)("li",{parentName:"ul"},"Sending")),Object(o.a)("p",null,"In the splitting state, the file is deconstructed in ",Object(o.a)("em",{parentName:"p"},"chunks")," (Swarms canonical data unit) and packaged in a ",Object(o.a)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Merkle_tree"}),Object(o.a)("em",{parentName:"a"},"Binary Merkle Tree")),". After splitting, the chunks are stored in your local database where they enter a queue, to be sent to the network."),Object(o.a)("p",null,"Sending starts immediately when the first chunks are split and stored. After the chunk is sent, your node will receive a receipt from the node that has stored the chunk, marking the completion of the upload for that chunk. After a receipt has been received for all chunks, the upload is complete."),Object(o.a)("h2",{id:"how-to-track-the-status-of-your-upload"},"How to track the status of your upload"),Object(o.a)("p",null,"The status of your upload can be followed by using ",Object(o.a)("inlineCode",{parentName:"p"},"tags"),". A ",Object(o.a)("inlineCode",{parentName:"p"},"tag")," is a label given to all chunks that belong to the same upload instruction. "),Object(o.a)("div",{className:"admonition admonition-info alert alert--info"},Object(o.a)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.a)("h5",{parentName:"div"},Object(o.a)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.a)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.a)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.a)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.a)("p",{parentName:"div"},"The tag label is only known to your node. It is ",Object(o.a)("strong",{parentName:"p"},"not")," communicated to the network, only your node will known that a set of chunks belong together."))),Object(o.a)("h3",{id:"generate-the-tag-identifier"},"Generate the tag identifier"),Object(o.a)("p",null,"To get the status of an upload, we can:"),Object(o.a)("p",null,"Generate the tag before the upload and pass this tag on upload"),Object(o.a)("div",{className:"admonition admonition-info alert alert--info"},Object(o.a)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.a)("h5",{parentName:"div"},Object(o.a)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.a)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.a)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.a)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.a)("p",{parentName:"div"},"To follow the status of your upload while it is splitting you must generate the tag yourself beforehand since the tag-uid is usually communicated only after splitting is complete."))),Object(o.a)("p",null,"Create a tag by sending a POST request to the ",Object(o.a)("inlineCode",{parentName:"p"},"tag")," API endpoint:"),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{className:"language-console"}),"curl -s -XPOST http://localhost:1633/tags | jq .uid\n> 4074122506\n")),Object(o.a)("p",null,"Use the returned UID to instruct your POST upload request to track this upload using the ",Object(o.a)("inlineCode",{parentName:"p"},"Swarm-Tag-UID")," header:"),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{className:"language-console"}),'curl -F file=@bee.jpg -H "Swarm-Tag-UID: 4074122506" http://localhost:1633/files\n')),Object(o.a)("div",{className:"admonition admonition-info alert alert--info"},Object(o.a)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.a)("h5",{parentName:"div"},Object(o.a)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.a)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.a)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.a)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.a)("p",{parentName:"div"},"If you don't want to track the ",Object(o.a)("em",{parentName:"p"},"splitting")," stage, you may omit the ",Object(o.a)("inlineCode",{parentName:"p"},"Swarm-Tag-UID")," header, and a new tag will be automatically created and returned in the HTTP response header after splitting is complete."),Object(o.a)("p",{parentName:"div"},"You can use ",Object(o.a)("inlineCode",{parentName:"p"},"curl --verbose")," to view the HTTP response headers such as the ",Object(o.a)("inlineCode",{parentName:"p"},"Swarm-Tag-UID")," header."))),Object(o.a)("h3",{id:"ask-for-the-current-status"},"Ask for the Current Status"),Object(o.a)("p",null,"To get the current status of an upload, send a GET request to the ",Object(o.a)("inlineCode",{parentName:"p"},"tag/<Swarm-Tag-UID>")," API endpoint."),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{className:"language-console"}),"curl http://localhost:1633/tags/4074122506 | jq\n")),Object(o.a)("p",null,"The response contains all the information that you need to follow the status of your file as it is synced with the network."),Object(o.a)("pre",null,Object(o.a)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "total": 36, //the total number of chunks, 0 if the upload is still splitting\n  "split": 36, //the current number of chunks which have been split and packed in the Binary Merkle Tree\n  "seen": 0, //chunks already seen by the network\n  "stored": 36, //the total number of chunks stored and queued for sending (if not seen before)\n  "sent": 36, //the total number of chunks sent to the network\n  "synced": 0, //the total number of receipts received\n  "uid": 4074122506,\n  "name": "unnamed_tag_1598627762",\n  "address": "",\n  "startedAt": "2020-08-28T16:16:02.071929+01:00" //when the tag was created (ISO 8601 format)\n}\n')))}d.isMDXComponent=!0}}]);
[{"title":"Large node operators","type":0,"sectionRef":"#","url":"docs/advanced/large-node-operators","content":"","keywords":""},{"title":"with configuration files","type":1,"pageTitle":"Large node operators","url":"docs/advanced/large-node-operators#with-configuration-files","content":"If you just want to run a handful of bee nodes, you can run multiple bee nodes by creating separate configuration files. Create your first configuration file by running bee printconfig \\ &> bee-config-1.yaml Copy Make as many copies of bee-config-1.yaml as you want to run bee nodes. Increment the number in the name (bee-config-1 to bee-config-2) for each new configuration file. Configure your nodes as desired, but ensure that the values api-addr, data-dir, debug-api-addr, p2p-addr and clef-signer-endpoint are unique for each configuration. Start each bee node in a separate terminal by running: bee start --config bee-config-<number_of_config_file> Copy "},{"title":"with docker-compose","type":1,"pageTitle":"Large node operators","url":"docs/advanced/large-node-operators#with-docker-compose","content":"It becomes easier to run multiple bee nodes with docker-compose. Please have a look at the README the docker-compose section of the bee node. "},{"title":"with Kubernetes","type":1,"pageTitle":"Large node operators","url":"docs/advanced/large-node-operators#with-kubernetes","content":"If you really want to run a lot of bee nodes and you have experience using Kubernetes with Helm, you can have a look at how we manage our cluster under Ethersphere/helm. "},{"title":"Welcome!","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Installation","type":1,"pageTitle":"Welcome!","url":"docs/#installation","content":"Don't have Bee installed yet? It's easy! Head over to the installation section to get Bee up and running on your computer. "},{"title":"Usage","type":1,"pageTitle":"Welcome!","url":"docs/#usage","content":"To learn more about how to get the most out of Bee, head over to the tutorials section to find out how to share files with your friends, use Bee to host a website on a public Swarm Gateway, and much more... "},{"title":"Dapps","type":1,"pageTitle":"Welcome!","url":"docs/#dapps","content":"Swarm is all about Dapps. We provide the most developer friendly environment to build Dapps on. Built on principles of functionality, flexibility and accessibility, Bee provides high level constructs for file storage, feeds and key-value stores, while also providing the low level access to other applications and libraries that create Single Owner and Trojan chunks clientside, with total e2e privacy. "},{"title":"Incentives","type":1,"pageTitle":"Welcome!","url":"docs/#incentives","content":"Need even more incentive to get involved with the wonderful world of Swarm? Find out how you'll soon be earning BZZ tokens for storing and distributing your share of the worlds data, sharing is caring! "},{"title":"Find Out More","type":1,"pageTitle":"Welcome!","url":"docs/#find-out-more","content":"What happens with your Bee node when you start it up? Want to know more about the amazing Swarm technology behind Bee? Want to make your own client? Read The Book of Swarm, our 250 page epic guide to the future tech underpinning the Swarm network. "},{"title":"Development","type":1,"pageTitle":"Welcome!","url":"docs/#development","content":"We'd love you to join us! Are you up to the challenge of helping us to create Bee and the other incredible technologies we're building on top of it? You are invited to contribute code to the Bee Client or any of the other projects in Swarm's Ethersphere. "},{"title":"Community","type":1,"pageTitle":"Welcome!","url":"docs/#community","content":"There is a vibrant and buzzing community behind Swarm, get involved in one of our group channels. SwarmDiscordTwitter @ethswarmreddit channelMediumSwarm Bee Support "},{"title":"Reporting a bug","type":1,"pageTitle":"Welcome!","url":"docs/#reporting-a-bug","content":"If your Bee isn't working, get in touch with our #bee-support channel on Discord or let us know on GitHub! Every Bee is important to us and we'll get right to work on fixing it for you as soon as possible. üêù Thanks for being here, we wish you Love and Bees from the Swarm Team x "},{"title":"Persistence","type":0,"sectionRef":"#","url":"docs/advanced/persistence","content":"","keywords":""},{"title":"Local Pinning","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#local-pinning","content":"If a node operator wants to keep content so that it can be accessed only by local users of that node, via the APIs or Gateway, chunks can be pinned either during upload, or retrospectively using the Swarm reference. caution Files pinned using local pinning will still not necessarily be available to the rest of the network. Read global pinning to find out how to keep your files available to the whole of the swarm. "},{"title":"Pin During Upload","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#pin-during-upload","content":"To store content so that it will persist even when Bee's garbage collection routine is deleting old chunks, we simply pass the Swarm-Pin header set to true when uploading. curl -H \"swarm-pin: true\" --data-binary @bee.mp4 localhost:1633/files\\?bee.mp4 Copy {\"reference\":\"7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f\"} Copy "},{"title":"Administrating Pinned Content","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#administrating-pinned-content","content":"Let's check to make sure this content was indeed pinned by querying the chunks api for the swarm reference to see whether the root chunk is currently pinned. curl http://localhost:1633/pin/chunks/7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f Copy {\"address\":\"7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f\",\"pinCounter\":1} Copy Success! Our pin counter is set to 1! Unpinning Content# If we later decide our content is no longer worth keeping, we can simply unpin it by sending a DELETE request to the pinning endpoint using the same reference. curl -XDELETE http://localhost:1633/pin/files/7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f `` ```json {\"message\":\"OK\",\"code\":200} Copy Now, if we check again, we'll get a 404 error as the content is no longer pinned. curl http://localhost:1633/pin/chunks/7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f Copy {\"message\":\"Not Found\",\"code\":404} Copy info Pinning and unpinning is possible for files (as in the example) and also the chunks, directories, and bytes endpoints. See the API documentation for more details. Pinning Already Uploaded Content# The previous example showed how we can pin content upon upload. It is also possible to pin content that is already uploaded. To do so, we can send a POST request including the swarm reference to the files pinning endpoint. curl -XPOST http://localhost:1633/pin/files/7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f `` ```json {\"message\":\"OK\",\"code\":200} Copy The pin operation will attempt to fetch the content from the network if it is not available on the local node. Now, if we query our files pinning endpoint again, the pin counter will once again have been incremented. curl http://localhost:1633/pin/chunks/7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f Copy {\"address\":\"7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f\",\"pinCounter\":1} Copy warning While the pin operation will fetch content from the network if it is not available locally, we advise you to ensure that the content is available locally before calling the pin operation. If the content, for whatever reason, is only fetched partially from the network, the pin operation only partly succeeds, which leaves the internal administration of pinning in an inconsistent state. "},{"title":"Global Pinning","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#global-pinning","content":"Local pinning ensures that your own node does not delete uploaded files. But other nodes that store your chunks (because they fall within their neighbourhood of responsibility) may have deleted content that has not been accessed recently to make room for new chunks. info For more info on how chunks are distributed, persisted and stored within the network, readThe Book of Swarm. To keep this content alive, your Bee node can be configured to refresh this content when it is requested by other nodes in the network, using global pinning. First, we must start up our node with the global-pinning-enable flag set. bee start\\ --verbosity 5 \\ --swap-endpoint https://rpc.slock.it/goerli \\ --global-pinning-enable \\ --debug-api-enable Copy Next, we pin our file locally, as shown above. curl -H \"swarm-pin: true\" --data-binary @bee.mp4 localhost:1633/files\\?bee.mp4 Copy {\"reference\":\"7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f\"} Copy Now, when we distribute links to our files, we must also specify the first two bytes of our overlay address as the target. If a chunk that has already been garbage collected by its storer nodes is requested, the storer node will send a message usingPSS to the Swarm neighbourhood defined by this prefix, of which our node is a member. Let's use the addresses API endpoint to find out our target prefix. curl -s http://localhost:1635/addresses | jq .overlay Copy \"320ed0e01e6e3d06cab44c5ef85a0898e68f925a7ba3dc80ee614064bb7f9392\" Copy Finally, we take the first two bytes of our overlay address, 320e and include this when referencing our chunk. curl http://localhost:1633/files/7b344ea68c699b0eca8bb4cfb3a77eb24f5e4e8ab50d38165e0fb48368350e8f?targets=320e Copy Now, even if our chunks are deleted, they will be repaired in the network by our local Bee node and will always be available to the whole swarm! "},{"title":"Starting a Test Network","type":0,"sectionRef":"#","url":"docs/advanced/starting-a-test-network","content":"","keywords":""},{"title":"Start a network on your own computer","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#start-a-network-on-your-own-computer","content":""},{"title":"Configuration","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#configuration","content":"Starting a network is easiest achieved by making use of configuration files. We need at least two nodes to start a network. Hence, below two configuration files are provided. Save them respectively as config_1.yaml and config_2.yaml. config_1.yaml network-id: 7357 api-addr: :1633 p2p-addr: :1634 debug-api-addr: 127.0.0.1:1635 debug-api-enable: true bootnode: \"\" data-dir: /tmp/bee/node1 password: some pass phze swap-enable: false Copy config_2.yaml network-id: 7357 api-addr: :1733 p2p-addr: :1734 debug-api-addr: 127.0.0.1:1735 debug-api-enable: true data-dir: /tmp/bee/node2 bootnode: \"\" password: some pass phze welcome-message: \"Bzz Bzz Bzz\" swap-enable: false Copy Note that for each node, we provide a different api-addr,debug-api-addr. If we had not specified different addresses here, we would get an address already in use error, as no two applications can listen to the same port. We also specify a differentp2p-addr. If we had not, our nodes would not be able to communicate with each other. We also specify a separate data-dir for each node, as each node must have its own separate key and chunk data store. We also provide a network-id, so that our network remains separate from the Swarm mainnet, which has network-id 1. Nodes will not connect to peers which have a different network id. We also set our bootnode to be the empty string \"\". A bootnode is responsible for bootstrapping the network so that a new node can find its first few peers before it begins its own journey to find friends in the Swarm. In Swarm any node can be used as a bootnode. Later, we will manually join our nodes together so in this case a bootnode isn't required. Finally, note the welcome-message in the first nodes configuration file. This is a friendly feature allowing you to send a message to peers that connect to you! "},{"title":"Starting Your Nodes","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#starting-your-nodes","content":"Now we have created our configuration files, let's start our nodes by running bee start --config config_1.yaml, then in another Terminal session, run bee start --config-file config_2.yaml. We can now inspect the state of our network by sending HTTP requests to the Debug API.. curl -s http://localhost:1635/topology | jq .connected Copy 0 Copy curl -s http://localhost:1735/topology | jq .connected Copy 0 Copy No connections yet? Right! Let's remedy that! info Here we are using the jq command line utility to count the amount of objects in the peers array in the JSON response we have received from our Debug API, learn more about how to install and use jq here. "},{"title":"Making a network","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#making-a-network","content":"In order to create a network from our two isolated nodes, we must first instruct our nodes to connect to each other. This step is not explicitly needed if you connect to the main Swarm network, as the default bootnodes in the Swarm network will automatically suggest peers. First, we will need to find out the network address of the first node. To do this, we send a HTTP request to the addresses endpoint of the Debug API. curl localhost:1635/addresses | jq Copy { \"overlay\": \"f57a65207f5766084d3ebb6bea5e2e4a712504e54d86a00961136b514f07cdac\", \"underlay\": [ \"/ip4/127.0.0.1/tcp/1634/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\", \"/ip4/192.168.0.10/tcp/1634/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\", \"/ip6/::1/tcp/1634/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\", \"/ip4/xx.xx.xx.xx/tcp/40317/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\" ] } Copy Here, we get firstly the overlay address - this is the permanent address Swarm uses as your anonymous identity in the network and secondly, a list of all the multiaddresses, which are physical network addresses at which you node can be found by peers. Note the addresses starting with an /ip4, followed by 127.0.0.1, which is the localhost internal network in your computer. Now we can use this full address to be the bootnode of our second node so that when it starts up, it goes to this address and both nodes become peers of each other. Let's add this into our config_2.yaml file. config_2.yaml network-id: 7357 api-addr: :1733 p2p-addr: :1734 debug-api-addr: 127.0.0.1:1735 debug-api-enable: true data-dir: /tmp/bee/node2 bootnode: \"/ip4/127.0.0.1/tcp/1634/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\" password: some pass phze welcome-message: \"Bzz Bzz Bzz\" swap-enable: false Copy Now, we can shut our second node and reboot with the new configuration. Look at the the output for your first node, you should see our connection message! Let's also verify that we can see both nodes in using each other's Debug API's. curl -s http://localhost:1635/peers | jq Copy curl -s http://localhost:1635/peers | jq Copy Congratulations! You have made your own tiny two bee Swarm! üêù üêù "},{"title":"PSS Messaging","type":0,"sectionRef":"#","url":"docs/advanced/pss","content":"","keywords":""},{"title":"Subscribe and Receive Messages","type":1,"pageTitle":"PSS Messaging","url":"docs/advanced/pss#subscribe-and-receive-messages","content":"Once your Bee node is up and running, you will be able to subscribe to feeds using websockets. For testing, it is useful to use the websocat command line utility. Here we subscribe to the topic test-topic websocat ws://localhost:1633/pss/subscribe/test-topic Copy Our node is now watching for new messages received in its nearest neighbourhood. info Because a message is disguised as a normal chunk in Swarm, you will receive the message upon syncing the chunk, even if your node is not online at the moment when the message was send to you. "},{"title":"Send Messages","type":1,"pageTitle":"PSS Messaging","url":"docs/advanced/pss#send-messages","content":"Messages can be sent simply by sending a POST request to the PSS api endpoint. When sending messages, we must specify a 'target' prefix of the recipients swarm address, a partial address representing their neighbourhood. Currently the length of this prefix is recommended to be two bytes, which will work well until the network has grown to a size of ca. 20-50K nodes. We must also provide the public key, so that Bee can encrypt the message in such a way that it may only be read by the intended recipient. For example, if we want to send a PSS message with topic test-topic to a node with address... 7bc50a5d79cb69fa5a0df519c6cc7b420034faaa61c175b88fc4c683f7c79d96 ...and public key... 0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd ...we must include the target 7bc5 and the public key itself as a query argument. curl -XPOST \\ localhost:1833/pss/send/test-topic/7bc5?recipient=0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd \\ --data \"Hello Swarm\" Copy "},{"title":"Send Messages in a Test Network","type":1,"pageTitle":"PSS Messaging","url":"docs/advanced/pss#send-messages-in-a-test-network","content":"Now, let's see this in action by setting up two Bee nodes on a test network, connecting them, and sending PSS messages from one to the other. First start two Bee nodes. We will start them with distinct ports for the api, debug api and p2p port so that there are no conflicts, since they will be running on the same computer. Run the following command to start the first node. Note that we are passing \"\" to the --bootnode argument so that our nodes will not connect to a network. bee start \\ --api-addr=:1833 \\ --debug-api-enable \\ --debug-api-addr=:1835 \\ --data-dir=/tmp/bee2 \\ --bootnode=\"\" \\ --p2p-addr=:1834 \\ --swap-endpoint=https://rpc.slock.it/goerli Copy We must make a note of the Swarm overlay address, underlay address and public key which are created once each node has started. We find this information from the addresses endpoint of the Debug API. curl -s localhost:1835/addresses | jq Copy { \"overlay\": \"46275b02b644a81c8776e2459531be2b2f34a94d47947feb03bc1e209678176c\", \"underlay\": [ \"/ip4/127.0.0.1/tcp/7072/p2p/16Uiu2HAmTbaZndBa43PdBHEekjQQEdHqcyPgPc3oQwLoB2hRf1jq\", \"/ip4/192.168.0.10/tcp/7072/p2p/16Uiu2HAmTbaZndBa43PdBHEekjQQEdHqcyPgPc3oQwLoB2hRf1jq\", \"/ip6/::1/tcp/7072/p2p/16Uiu2HAmTbaZndBa43PdBHEekjQQEdHqcyPgPc3oQwLoB2hRf1jq\" ], \"ethereum\": \"0x0b546f2817d0d889bd70e244c1227f331f2edf74\", \"public_key\": \"03660e8dbcf3fda791e8e2e50bce658a96d766e68eb6caa00ce2bb87c1937f02a5\" } Copy Now the same for the second node. bee start \\ --api-addr=:1933 \\ --debug-api-enable \\ --debug-api-addr=:1935 \\ --data-dir=/tmp/bee3 \\ --bootnode=\"\" \\ --p2p-addr=:1934 \\ --swap-endpoint=https://rpc.slock.it/goerli Copy curl -s localhost:1935/addresses | jq Copy { \"overlay\": \"085b5cf15a08f59b9d64e8ce3722a95b2c150bb6a2cef4ac8b612ee8b7872253\", \"underlay\": [ \"/ip4/127.0.0.1/tcp/7073/p2p/16Uiu2HAm5RwRgkZWxDMAff2io6L4Qd1uL9yNgZSNTCdPsukcg5Qr\", \"/ip4/192.168.0.10/tcp/7073/p2p/16Uiu2HAm5RwRgkZWxDMAff2io6L4Qd1uL9yNgZSNTCdPsukcg5Qr\", \"/ip6/::1/tcp/7073/p2p/16Uiu2HAm5RwRgkZWxDMAff2io6L4Qd1uL9yNgZSNTCdPsukcg5Qr\" ], \"ethereum\": \"0x9ec47bd86a82276fba57f3009c2f6b3ace4286bf\", \"public_key\": \"0289634662d3ed7c9fb1d7d2a3690b69b4075cf138b683380023d2edc2e6847826\" } Copy Because we configured the nodes to start with no bootnodes, neither node should have peers yet. curl -s localhost:1835/peers | jq Copy curl -s localhost:1935/peers | jq Copy { \"peers\": [] } Copy Let's connect node 2 to node 1 using the localhost (127.0.0.1) underlay address for node 1 that we have noted earlier. curl -XPOST \\ localhost:1935/connect/ip4/127.0.0.1/tcp/1834/p2p/16Uiu2HAmP9i7VoEcaGtHiyB6v7HieoiB9v7GFVZcL2VkSRnFwCHr Copy Now, if we check our peers endpoint for node 1, we can see our nodes are now peered together. curl -s localhost:1835/peers | jq Copy { \"peers\": [ { \"address\": \"a231764383d7c46c60a6571905e72021a90d506ef8db06750f8a708d93fe706e\" } ] } Copy Of course, since we are p2p, node 2 will show node 1 as a peer too. curl -s localhost:1935/peers | jq Copy { \"peers\": [ { \"address\": \"7bc50a5d79cb69fa5a0df519c6cc7b420034faaa61c175b88fc4c683f7c79d96\" } ] } Copy We will use websocat to listen for PSS messages topic ID test-topic on our first node. websocat ws://localhost:1833/pss/subscribe/test-topic Copy Now we can use PSS to send a message from our second node to our first node. Since our first node has a 2 byte address prefix of a231, we will specify this as the targets section in our POST request's URL. We must also include the public key of the recipient as a query parameter so that the message can be encrypted in a way only our recipient can decrypt. curl \\ -XPOST \"localhost:1933/pss/send/test-topic/7bc5?recipient=0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd\" \\ --data \"Hello Swarm\" Copy The PSS API endpoint will now create a PSS message for its recipient in the form of a 'Trojan Chunk' and send this into the network so that it may be pushed to the correct neighbourhood. Once it is received by its recipient it will be decrypted and determined to be a message with the topic we are listening for. Our second node will decrypt the data and we'll see a message pop up in our websocat console! websocat ws://localhost:1833/pss/subscribe/test-topic Copy Hello Swarm Copy Congratulations! üéâ You have sent your first encrypted, zero leak message over Swarm! "},{"title":"Track Upload Status","type":0,"sectionRef":"#","url":"docs/advanced/tags","content":"","keywords":""},{"title":"Generate the tag automatically","type":1,"pageTitle":"Track Upload Status","url":"docs/advanced/tags#generate-the-tag-automatically","content":"A tag identifier is automatically created for you on each upload. You can find the tag in the Swarm-Tag header response. You can view this header response with curl when passing the --verbose flag to an upload: curl --data-binary @bee.jpg -verbose \"http://localhost:1633/files?name=bee.jpg\" Copy "},{"title":"Generate the tag manually","type":1,"pageTitle":"Track Upload Status","url":"docs/advanced/tags#generate-the-tag-manually","content":"While the automatically-generated tag is convenient, with big uploads it might take a while until the bee API returns the headers. What you want to do in this case is to pre-generate the tag and pass this tag along the upload command. Generate a tag: curl -X POST http://localhost:1633/tags > {\"uid\":1278066217,\"startedAt\":\"2021-02-04T15:10:47.260477637+01:00\",\"total\":0,\"processed\":0,\"synced\":0} Copy Pass the tag along the upload: curl --data-binary @bee.jpg -H \"Swarm-Tag: 1278066217\" \"http://localhost:1633/files?name=bee.jpg\" Copy info When you manually create the tag, you will be able to view the status of preparing the chunks for upload (processed) as well as the status of uploading to the network (synced) "},{"title":"Ask for the Current Status","type":1,"pageTitle":"Track Upload Status","url":"docs/advanced/tags#ask-for-the-current-status","content":"To get the current status of an upload, send a GET request to the tag/<Swarm-Tag> API endpoint. curl http://localhost:1633/tags/1278066217 | jq Copy The response contains all the information that you need to follow the status of your file as it is synced with the network. info The number which the tags endpoint is returning under total, processed and synced are the number of chunks, Swarms canonical data unit of 4000kb "},{"title":"SWAP Bandwidth Accounting","type":0,"sectionRef":"#","url":"docs/advanced/swap","content":"Underpinning Swarm is a set of accounting protocols that have been developed and prototyped during over 5 years of R&D. Your Beta Bee node contains functionality giving it the ability to keep track of bandwidth exchanges with all its peers, issue and cache cheques using smart contracts which live on EVM compatible blockchain. Currently we are in the testing phase using the Goerli testnet. We would love for you to get involved, help us try out these incentives and maybe even earn some gBZZ! info Learn more about how SWAP and the other accounting protocols work by readingThe Book of Swarm. To investigate our accounting, let's upload a 20mb file to the network so we can see some traffic being generated as Bee begins to push chunks into the network. In order to do this, we will pay a forwarding cost in each node that passes the chunk on. First, we will need to run our Bee node with a RPC endpoint, debug api enabled and verbosity set to TRACE. bee start \\ --verbosity 5 \\ --swap-enable \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Copy dd if=/dev/urandom of=/tmp/test.txt bs=1m count=20 curl -F file=@/tmp/test.txt http://localhost:1633/files Copy If we set --verbosity 5 in our Bee configuration, we will be able to see these individual transactions being recorded on our node's internal per peer ledgers. ... TRAC[2020-09-28T15:18:08+01:00] crediting peer f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47 with price 150, new balance is -2300 TRAC[2020-09-28T15:18:08+01:00] crediting peer f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47 with price 150, new balance is -2450 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk bd638a8c58f48ca6729b6d86b7623c524f7c74e4ed9bc71712637b8b50234ce0 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk b06309f68a89f1a6513d3231ad2d5335b3c0309972513a4f28d949e7fc47e39d TRAC[2020-09-28T15:18:08+01:00] crediting peer e00460ced3c509dfd72b6ce915c764b13669e65f95b3ba84dcb7d4b6d18a0b11 with price 150, new balance is -8780 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk a81c8ee73284f8c0d1b7cfa0b0907c5b12c3b56d1accd08835543771e93c7fc5 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk 056f59ca65bdfb8b7499c44a7d8d8ed29d7b4eaa39621b468bdbb69fc2de4b87 TRAC[2020-09-28T15:18:08+01:00] crediting peer e00460ced3c509dfd72b6ce915c764b13669e65f95b3ba84dcb7d4b6d18a0b11 with price 150, new balance is -8930 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk a3c6958271aab4e1ad53206898f045a169a57aeaab0531cbcf497c8ff10a7800 TRAC[2020-09-28T15:18:08+01:00] crediting peer f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47 with price 120, new balance is -2570 ... Copy We also have a rich set of features to be able to query the current accounting state of your node. For example, you may query your node's current balance by send a POST request to the balances endpoint. curl localhost:1635/chequebook/balance | jq Copy { \"totalBalance\": 10000000, \"availableBalance\": 9640360 } Copy It is also possible to examine per-peer balances. curl localhost:1635/balances | jq Copy { \"balances\": [ //... { \"peer\": \"d0bf001e05014fa036af97f3d226bee253d2b147f540b6c2210947e5b7b409af\", \"balance\": -85420 }, { \"peer\": \"f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47\", \"balance\": -75990 } //... ] } Copy In Swarm, these per-peer balances simply represent trustful agreements between nodes. Tokens only actually change hands when a node settles a cheque. This can either be triggered manually or when a certain threshold is reached with a peer. In this case, a settlement takes place. You may view these using the settlements endpoint. curl localhost:1635/settlements | jq Copy { \"totalreceived\": 0, \"totalsent\": 359640, \"settlements\": [ // ... { \"peer\": \"d0bf001e05014fa036af97f3d226bee253d2b147f540b6c2210947e5b7b409af\", \"received\": 0, \"sent\": 90070 }, { \"peer\": \"f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47\", \"received\": 89890, \"sent\": 0 } // ... ] } Copy More info can be found by using the chequebook api. curl localhost:1635/chequebook/cheque | jq Copy { \"totalreceived\": 0, \"totalsent\": 718030, \"settlements\": [ //... { \"peer\": \"dce1833609db868e7611145b48224c061ea57fd14e784a278f2469f355292ca6\", \"received\": 0, \"sent\": 89550 } //... ] } Copy As our node's participation in the network increases, we will begin to see more and more of these balances arriving. In the case that we have received a settlement from another peer, we can ask our node to perform the relevant transactions on the blockchain, and cash our earnings out. To do this, we simply POST the relevant peer's address to the cashout endpoint. curl -XPOST http://localhost:1635/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b Copy {\"transactionHash\":\"0xba7b500e21fc0dc0d7163c13bb5fea235d4eb769d342e9c007f51ab8512a9a82\"} Copy You may check the status of your transaction using Goerli Etherscan Finally, we can now see the status of the cashout transaction by sending a GET request to the same URL. curl http://localhost:1635/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b | jq Copy { \"peer\": \"d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b\", \"chequebook\": \"0xae315a9adf0920ba4f3353e2f011031ca701d247\", \"cumulativePayout\": 179160, \"beneficiary\": \"0x21b26864067deb88e2d5cdca512167815f2910d3\", \"transactionHash\": \"0xba7b500e21fc0dc0d7163c13bb5fea235d4eb769d342e9c007f51ab8512a9a82\", \"result\": { \"recipient\": \"0x312fe7fde9e0768337c9b3e3462189ea6f9f9066\", \"lastPayout\": 179160, \"bounced\": false } } Copy Success, we earned our first gBZZ! üêù Now we have earnt tokens, to withdraw our gBZZ from the chequebook contract back into our node's own wallet, we simply POST a request to the chequebook withdraw endpoint. curl -XPOST http://localhost:1635/chequebook/withdraw\\?amount\\=1000 | jq Copy And conversely, if we have used more services than we have provided, we may deposit extra gBZZ into the chequebook contract by sending a POST request to the deposit endpoint. curl -XPOST http://localhost:1635/chequebook/deposit\\?amount\\=1000 | jq Copy {\"transactionHash\":\"0x60fd4be6c1db4552ecb5cd3c99f6a4906089277f592593cccd1fee0dbf501085\"} Copy You may use then Etherscan to track your transaction and make sure it completes successfully. https://goerli.etherscan.io/tx/0xedc80ebc89e6d719e617a50c6900c3dd5dc2f283e1b8c447b9065d7c8280484a` Managing uncashed cheques# For the Bee process, the final step of earning BZZ is cashing a swap-cheque. It is worth noting that a cheque is not yet generally accepted currency. A swap-cheque is, just like a real cheque, a promise to hand over money upon request. In real life, you would present the cheque to a bank. In blockchain life, we are presenting the swap-cheque to a smart-contract. Holding on to a swap-cheque is risky; it is possible that the owner of the chequebook has issued too many cheques, worth more than there is money in the chequebook contract. For this reason you want to cash out your cheques with a certain frequency. With the set of API endpoints, as offered by Bee, it is possible to develop a script that fully manages the uncashed cheques for you. As an example, we offer you a very basic script, where you can manually cash out all cheques with a worth above a certain value. To use the script: Download and save the script: wget -O cashout.sh https://gist.githubusercontent.com/ralph-pichler/3b5ccd7a5c5cd0500e6428752b37e975/raw/b40510f1172b96c21d6d20558ca1e70d26d625c4/cashout.sh Copy Make the file executable chmod +x cashout.sh Copy List all uncashed cheques and cash out your cheques above a certain value List: ./cashout.sh Copy info If running ./cashout.sh returns nothing, you currently have no uncashed cheques. Cashout all cheques worth more than 5 BZZ ./cashout.sh cashout-all 5 Copy info Are you a Windows-user who is willing to help us? We are currently missing a simple cashout script for Windows. Please see the issue info Please find the officially deployed smart-contract by the Swarm team on the swap-swear-and-swindle repository","keywords":""},{"title":"Architecture","type":0,"sectionRef":"#","url":"docs/architecture/architecture","content":"Developers who want to develop client implementations and others who want to understand the underlying concepts and design of Swarm are invited to readThe Book of Swarm, which is the authoritative reference.","keywords":""},{"title":"API and Debug API","type":0,"sectionRef":"#","url":"docs/api-reference/api-reference","content":"","keywords":""},{"title":"API","type":1,"pageTitle":"API and Debug API","url":"docs/api-reference/api-reference#api","content":"The API-endpoint exposes all functionality to upload and download content to and from the Swarm network. By default, it runs on port :1633. Detailed information about Bee API endpoint can be found here: Bee API reference. "},{"title":"Debug API","type":1,"pageTitle":"API and Debug API","url":"docs/api-reference/api-reference#debug-api","content":"The debug-API is disabled by default but be enabled by setting the enable-debug-api configuration option to true. The debug-API exposes functionality to inspect the state of your Bee node while it is running, as well as some other features that should not be exposed to the public internet. The Debug API runs on port :1635 by default. info For a new installation of Bee, the debug API endpoint is not yet exposed for security reasons. To enable the debug API endpoints, set debug-api-enable to true in your configuration file and restart your Bee service. Debug API reference., danger Your Debug API should not be exposed to the public internet, make sure that your network has a firewall which blocks port 1635, or bind the Debug API to localhost "},{"title":"Useful Developer Info","type":0,"sectionRef":"#","url":"docs/bee-developers/useful-dev-info","content":"Welcome to the Dev area! We love PR's! üêù We would would love you to get involved with our Github repo. All the action can be found in our Discord Server. Sign up and get involved with our buzzing hive of daily dev chat. If you would like to contribute, please read the coding guidelines before you get started. Installation from source is described in the Installation. Testing a connection with PingPong protocol# To check if two nodes are connected and to see the round trip time for message exchange between them, get the overlay address from one node, for example local node 2: curl localhost:1835/addresses Copy Make sure that Debug API is enabled and address configured as in examples above. And use that address in the Debug API call on another node, for example, local node 1: curl -XPOST localhost:1735/pingpong/d4440baf2d79e481c3c6fd93a2014d2e6fe0386418829439f26d13a8253d04f1 Copy Generating protobuf# To process protocol buffer files and generate the Go code from it two tools are needed: protocprotoc-gen-gogofaster Makefile rule protobuf can be used to automate protoc-gen-gogofaster installation and code generation: make protobuf Copy Tracing# Developers can gain an additional level of insight into the node by enabling tracing. To make use of Tracing, we advice to make use of jaeger. Set up tracing by: Start jaeger:docker run -p 6831:6831/udp -p 16686:16686 jaegertracing/all-in-one:latest start locally two bee nodes (different data dirs and ports) and connect them (see \"Start a test network\" in the advanced section) with --tracing flag provided for both nodes Make a call to the PingPong API on one of the two nodes (curl -XPOST localhost:1735/pingpong/<overlay address other node>). Validate tracing in the web interface (http://localhost:16686/).","keywords":""},{"title":"Community","type":0,"sectionRef":"#","url":"docs/community/community","content":"Swarm is all about community. We want to make sure you have the best possible experience as you join and enjoy being a part of the our new internet. Swarm has a vibrant community of wonderful individuals who are eager to answer any questions and graciously welcome you to our swarm. Join us at our Discord server for peace, love, unity, respect, community, assistance and lots of highly obscure chat about cryptography. Thanks for being here with us, making a difference, we appreciate you!","keywords":""},{"title":"Store with Encryption","type":0,"sectionRef":"#","url":"docs/getting-started/store-with-encryption","content":"In Swarm, all data is public by default. To protect sensitive content, it must be encrypted so that only authorised users are able to decrypt and then view the plaintext content. The Bee client provides a facility to encrypt files and directories while uploading which are only able to be read by users with access to the corresponding decryption key. Encrypt and Upload a File# To encrypt a file simply include the Swarm-Encrypt: true header with your HTTP request. curl -F file=@bee.jpg -H \"Swarm-Encrypt: true\" http://localhost:1633/files Copy When successful, the Bee client will return a 64 byte reference, instead of the usual 32 bytes. {\"reference\":\"f7b1a45b70ee91d3dbfd98a2a692387f24db7279a9c96c447409e9205cf265baef29bf6aa294264762e33f6a18318562c86383dd8bfea2cec14fae08a8039bf3\"} Copy Here we see that, when using the Bee node's encryption function, the reference hash that is returned is 128 hex characters long. The first 64 characters of this are the familiar Swarm address - the reference that allows us to retrieve the data from the swarm - it is the same as the reference we would get uploading unencrypted files to using Bee it is safe to share. The second second part of the reference is a 64 character decryption key which is required to decrypt the referenced content and view the original data in the clear, this is sensitive key material and must be kept private. It is important that this data is not be sent in requests to a public gateway as this would mean that gateway would be able to decrypt your data. However, if you are running a node on your local machine, you may safely use the api bound to localhost. The key material is never exposed to the network so your data remains safe. info Encryption is disabled by default on all Swarm Gateways to keep your data safe. Install Bee on your computer to use the encryption feature. Download and Decrypt a File# To retrieve your file, simply supply the full 64 byte string to the files endpoint, and the Bee client will download and decrypt all the relevant chunks and restore them to their original format. curl -OJ http://localhost:1633/files/f7b1a45b70ee91d3dbfd98a2a692387f24db7279a9c96c447409e9205cf265baef29bf6aa294264762e33f6a18318562c86383dd8bfea2cec14fae08a8039bf3 Copy danger Never use public gateways when requesting full encrypted references, the hash contains sensitive key information which should be kept private. Run your own node to get to use Bee's encryption features.","keywords":""},{"title":"Host Your Website on Swarm","type":0,"sectionRef":"#","url":"docs/getting-started/host-your-website-using-ens","content":"","keywords":""},{"title":"Enable ENS on Your Node","type":1,"pageTitle":"Host Your Website on Swarm","url":"docs/getting-started/host-your-website-using-ens#enable-ens-on-your-node","content":"In order to resolve ENS names using your API endpoints, you must specify a valid ENS resolver endpoint when starting your Bee node. We recommend that users run their own Geth node, which can be trusted absolutely, however service providers such as https://cloudflare-eth.com or Infura may suffice. Public gateways such as gateway.ethswarm.org will also usually provide ENS resolution. bee start --resolver-options \"https://cloudflare-eth.com\" Copy If specifying using your bee.yaml configuration file, the syntax is as follows. resolver-options: [ \"https://cloudflare-eth.com\" ] Copy Once you have restarted your node, you should be able to see the Swarm homepage at: http://localhost:1633/bzz/swarm.eth/ info Use the resolver-options flag to point the bee resolver to any ENS compatible smart-contract on any EVM compatible chain :::warn Make sure you trust the gateway you are interacting with! To ensure that you are retrieving the correct content, run your own ENS resolver and Bee node. ::: "},{"title":"Link an ENS domain to a website.","type":1,"pageTitle":"Host Your Website on Swarm","url":"docs/getting-started/host-your-website-using-ens#link-an-ens-domain-to-a-website","content":"First we will need to upload the website assets to Swarm in order to get its Swarm reference hash, seeuploading a directoryfor more information. This time we will also include the Swarm-Index-Document header set to the index.html. This will cause Bee to serve each directories index.html file as default when browsing to the directory root / url. We will also provide a custom error page, using the Swarm-Error-Document header. In the case that your website is a single page app, where you would like to direct to the javascript history api powered router, you may provide the index.html page for both settings. curl \\ -X POST \\ -H \"Content-Type: application/x-tar\" \\ -H \"Swarm-Index-Document: index.html\" \\ -H \"Swarm-Error-Document: index.html\" \\ --data-binary @my_website.tar http://localhost:1633/dirs Copy {\"reference\":\"b25c89a401d9f26811680476619a1eb4a4e189e614bc6161cbfd8b343214917b\"} Copy Next, we add a Content record to your ENS domain's resolver contract. We recommend the excellent ENS Domains Dapp used with the Metamask browser extension for registering and administrating your ENS domain. Once you have registered your name, and have connected Metamask with the relevant Ethereum account, you must first set the resolver to use the public ENS if you have not already done so. First, navigate to 'My Names', and select the name you would like to link your Swarm content to. Press 'Set' next to your resolver record.  Choose the public resolver.  Press add a record.  Choose the Content Record type from the drop down menu.  Add the Swarm reference you created earlier and press 'save'.  Verify the Content Record has been created!  Done! üëè Now you will be able to see your website hosted using the ENS name instead of the Swarm Reference!  "},{"title":"Upload and Download Files","type":0,"sectionRef":"#","url":"docs/getting-started/upload-and-download","content":"","keywords":""},{"title":"Quick Upload","type":1,"pageTitle":"Upload and Download Files","url":"docs/getting-started/upload-and-download#quick-upload","content":"Once your Bee node is running, a HTTP API is enabled for you to interact with. The command line utility curl is a great way to interact with a Bee node's API. First, let's check to see if the API is running as expected... curl http://localhost:1633 Copy Ethereum Swarm Bee Copy Once running, a file can be uploaded by making an HTTP POST request to the files endpoint of the Bee API. curl -F file=@bee.jpg http://localhost:1633/files Copy We may also pass the appropriate mime type in the Content-Type header, and a file name to the name query parameter so that the file will be correctly handled by web browsers and other applications. curl --data-binary @bee.jpg -H \"Content-Type: video/jpg\" \"http://localhost:1633/files?name=bee.jpg\" Copy danger Data uploaded to the swarm is always public. In Swarm, sensitive files must be encrypted before uploading to ensure their contents always remains private. When succesful, a json formatted response will be returned, containing a swarm reference or hash which is the address of the uploaded file, for example: {\"reference\":\"042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4\"} Copy Keep this address safe, as we'll use it to retrieve our content later on. In Swarm, every piece of data has a unique address which is a unique and reproducible cryptographic hash digest. If you upload the same file twice, you will always receive the same hash. This makes working with data in Swarm super secure! info If you are uploading a large file it is useful to track the status of your upload as it is processed into the network. Head over to the advanced usage section to learn how to follow the status of your upload. Once your file has been completely synced with the network, you will be able to turn off your computer and other nodes will take over to serve the data for you! "},{"title":"Download","type":1,"pageTitle":"Upload and Download Files","url":"docs/getting-started/upload-and-download#download","content":"Once your file is uploaded into Swarm, it can be retrieved with a simple HTTP GET request. Substitute the hash in the last part of the url to be the reference to your own data. curl -OJ http://localhost:1633/files/042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4 Copy You may even simply navigate to the URL in your browser: http://localhost:1633/files/042d4fe...2291dd4 "},{"title":"Public Gateways","type":1,"pageTitle":"Upload and Download Files","url":"docs/getting-started/upload-and-download#public-gateways","content":"To share files with someone who isn't running a Bee node yet, simply change the host in the link to be one of our public gateways. Send the link to your friends, and they will be able to download the file too! https://gateway.ethswarm.org/files/042d4fe...2291dd4 "},{"title":"Upload a Directory","type":0,"sectionRef":"#","url":"docs/getting-started/upload-a-directory","content":"","keywords":""},{"title":"Upload the Directory Containing Your Website","type":1,"pageTitle":"Upload a Directory","url":"docs/getting-started/upload-a-directory#upload-the-directory-containing-your-website","content":"First, use the tar command line utility to create an archive containing all the files of your directory. If uploading a website, we must take care to ensure that the index.html file is at the root of the directory tree. tree build > my_website ‚îú‚îÄ‚îÄ assets ‚îÇ ‚îî‚îÄ‚îÄ style.css ‚îú‚îÄ‚îÄ index.html ‚îî‚îÄ‚îÄ error.html Copy Use the following command to ensure that the tar package maintains the correct directory structure. cd my_website tar -cf tar -cf ../my_website.tar . Copy Next, simply POST the tar file as binary data to Bee's dir endpoint, taking care to include the header Content Type: application/x-tar. curl \\ -X POST \\ -H \"Content-Type: application/x-tar\" \\ -H \"Swarm-Index-Document: index.html\" \\ -H \"Swarm-Error-Document: error.html\" \\ --data-binary @my_website.tar http://localhost:1633/dirs Copy info For instances where a Single Page App has a javascript router which handles url queries itself, simple pass index.html as the error document, and Bee will pass over control to the javascript served by the index.html file in the circumstance that a path does not yield a file from the manifest. When the upload is successful, Bee will return a json document containing the Swarm Reference. {\"reference\":\"b25c89a401d9f26811680476619a1eb4a4e189e614bc6161cbfd8b343214917b\"} Copy Now, simply navigate your browser to view the reference using the bzz endpoint and your website will be served! http://localhost:1633/bzz/b25c89a...214917b/index.html Other files are served at their relative paths, e.g. http://localhost:1633/bzz/b25c89a...214917b/assets/style.css Once your data has been fully processed into the network, you will then be able to retrieve it from any Bee node. https://gateway.ethswarm.org/bzz/b25c89a...214917b/index.html If you are not able to download your file from a different Bee node, you may be experiencing connection issues, see troubleshooting connectivity for assistance. :::warn Not all directory structures, as supported by tar, can be supported in Bee. The reason is that not all valid directory structures are valid paths for an HTTP router (e.g. paths that are in a parent directory to the root). Bee will accept and upload the invalid directory structures, but some of your content might not be accessible. ::: "},{"title":"Working With Your Node","type":0,"sectionRef":"#","url":"docs/getting-started/working-with-your-node","content":"","keywords":""},{"title":"Debug API","type":1,"pageTitle":"Working With Your Node","url":"docs/getting-started/working-with-your-node#debug-api","content":"The Debug API provides a privileged environment where you are able to interact with your Bee node to get more information about the status of your node. danger Never expose your Debug API to the public internet, make sure to use a firewall or bind to localhost, as we have in the example below. To use the Debug API we must first configure Bee to enable it, as it is disabled by default. bee start --debug-api-enable --debug-api-addr=localhost:1635 Copy Checking Connectivity# First, let's check how many nodes we are currently connected to. curl -s http://localhost:1635/peers | jq '.peers | length' Copy 23 Copy Great! We can see that we are currently connected and sharing data with 23 other nodes! info Here we are using the jq command line utility to count the amount of objects in the peers array in the JSON response we have received from our Debug API, learn more about how to install and use jq here. Inspect Network Topology# We can gain even more insight into how your Bee client is becoming a part of the global network your using the topology endpoint. curl -X GET http://localhost:1635/topology | jq Copy In this example, our node is beginning to form a healthy network. We hope to see our node adding and connecting to nodes in as many bins as possible. Learn more about promiximity order bins and how your Bee node becomes part of the ordered p2p network inThe Book of Swarm. { \"baseAddr\": \"793cdae71d51b0ffc09fecd1c5b063560150cf2e1d55058bad4a659be5894ab1\", \"population\": 159, \"connected\": 19, \"timestamp\": \"2020-08-27T19:24:16.451187+01:00\", \"nnLowWatermark\": 2, \"depth\": 4, \"bins\": { \"bin_0\": { \"population\": 77, \"connected\": 4, \"...\": \"...\" }, \"bin_1\": { \"population\": 37, \"connected\": 4, } } } } Copy Find out more about what you can do with the Debug API here. "},{"title":"Build from Source","type":0,"sectionRef":"#","url":"docs/installation/build-from-source","content":"","keywords":""},{"title":"Build from Source","type":1,"pageTitle":"Build from Source","url":"docs/installation/build-from-source#build-from-source","content":"1) Clone the repository: git clone https://github.com/ethersphere/bee cd bee Copy 2) Use git to find the latest release: git describe --tags Copy 3) Checkout the required version: git checkout v0.5.3 Copy 4) Build the binary: make binary Copy 5) Check you are able to run the bee command. Success can be verified by running: dist/bee version Copy 0.5.3 Copy 6) (optional) Additionally, you may also like to move the Bee binary to somewhere in your $PATH sudo cp dist/bee /usr/local/bin/bee Copy "},{"title":"Clef External Signer","type":0,"sectionRef":"#","url":"docs/installation/bee-clef","content":"","keywords":""},{"title":"Packages","type":1,"pageTitle":"Clef External Signer","url":"docs/installation/bee-clef#packages","content":"Bee clef can be installed automatically using your system's package manager. Ubuntu / Debian / RaspbianCentOSMacOS AMD64# wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_amd64.deb sudo dpkg -i bee-clef_0.4.9_amd64.deb Copy ARM (Raspberry Pi)# ARMv7# wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_armv7.deb sudo dpkg -i bee-clef_0.4.9_armv7.deb Copy ARM64# wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_arm64.deb sudo dpkg -i bee-clef_0.4.9_arm64.deb Copy "},{"title":"Configuring Bee-clef","type":1,"pageTitle":"Clef External Signer","url":"docs/installation/bee-clef#configuring-bee-clef","content":"Configuration files are stored in /etc/bee-clef/ Under a normal/default package install, there wont be any configuration changes necessary to start using bee-clef. "},{"title":"Interact With Clef","type":1,"pageTitle":"Clef External Signer","url":"docs/installation/bee-clef#interact-with-clef","content":"Once Clef has been installed, it will begin running as a service. To check Clef is running ok, we may use systemctl (on Linux) or launchctl (on MacOS) to query the status of the bee-clef service. LinuxMacOS systemctl status bee-clef Copy ‚óè bee-clef.service - Bee Clef Loaded: loaded (/lib/systemd/system/bee-clef.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2020-11-20 23:45:16 GMT; 1min 29s ago Copy And if you want to follow it's logs, you can use: journalctl -f -u bee-clef.service Copy When Bee-clef first starts, you should see something very similar to the following: Feb 21 19:52:43 comp-name systemd[1]: Started Bee Clef. Feb 21 19:52:43 comp-name bee-clef-service[494678]: WARNING! Feb 21 19:52:43 comp-name bee-clef-service[494678]: Clef is an account management tool. It may, like any software, contain bugs. Feb 21 19:52:43 comp-name bee-clef-service[494678]: Please take care to Feb 21 19:52:43 comp-name bee-clef-service[494678]: - backup your keystore files, Feb 21 19:52:43 comp-name bee-clef-service[494678]: - verify that the keystore(s) can be opened with your password. Feb 21 19:52:43 comp-name bee-clef-service[494678]: Clef is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; Feb 21 19:52:43 comp-name bee-clef-service[494678]: without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR Feb 21 19:52:43 comp-name bee-clef-service[494678]: PURPOSE. See the GNU General Public License for more details. Feb 21 19:52:43 comp-name bee-clef-service[494678]: INFO [02-21|19:52:43.862] Using stdin/stdout as UI-channel Feb 21 19:52:44 comp-name bee-clef-service[494678]: INFO [02-21|19:52:44.036] Loaded 4byte database embeds=146841 locals=3 local=/etc/bee-clef/4byte.json Feb 21 19:52:44 comp-name bee-clef-service[494678]: {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"ui_onInputRequired\",\"params\":[{\"title\":\"Master Password\",\"prompt\":\"Please enter the password to decrypt the master seed\",\"isPassword\":true}]} Feb 21 19:54:25 comp-name bee-clef-service[494678]: INFO [02-21|19:54:25.048] Rule engine configured file=/etc/bee-clef/rules.js Feb 21 19:54:25 comp-name bee-clef-service[494678]: INFO [02-21|19:54:25.048] Starting signer chainid=5 keystore=/var/lib/bee-clef/keystore light-kdf=false advanced=false Feb 21 19:54:25 comp-name bee-clef-service[494678]: INFO [02-21|19:54:25.049] IPC endpoint opened url=/var/lib/bee-clef/clef.ipc Feb 21 19:54:25 comp-name bee-clef-service[494678]: {\"jsonrpc\":\"2.0\",\"method\":\"ui_onSignerStartup\",\"params\":[{\"info\":{\"extapi_http\":\"n/a\",\"extapi_ipc\":\"/var/lib/bee-clef/clef.ipc\",\"extapi_version\":\"6.1.0\",\"intapi_version\":\"7.0.1\"}}]} Copy info This line can be safely ignored, there is no action required: {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"ui_onInputRequired\",\"params\":[{\"title\":\"Master Password\",\"prompt\":\"Please enter the password to decrypt the master seed\",\"isPassword\":true}]} As soon as bee starts interacting with bee-clef you should start to see log messages populate, for a regularly active and connected node they will appear every few seconds: Feb 24 22:29:15 comp-name bee-clef-service[1118]: INFO [02-24|22:29:15.118] Op approved Feb 24 22:30:17 comp-name bee-clef-service[1118]: INFO [02-24|22:30:17.371] Op approved Feb 24 22:30:19 comp-name bee-clef-service[1118]: INFO [02-24|22:30:19.344] Op approved ... Copy "},{"title":"Data Locations","type":1,"pageTitle":"Clef External Signer","url":"docs/installation/bee-clef#data-locations","content":"Key material and other data is stored in /var/lib/bee-clef/ info Bee can communicate with Bee-clef in a variety of ways. The default way, if installed via the packages, will use an Inter-process communication (IPC) file. This is a special file that Bee-clef creates on startup that Bee will use to send requests back-and-forth. When the Bee-clef service is running you'll notice that a /var/lib/bee-clef/clef.ipc file is created. "},{"title":"Manual Installation","type":1,"pageTitle":"Clef External Signer","url":"docs/installation/bee-clef#manual-installation","content":"To install Clef manually, first retrieve the relevant Clef binary from Ethereum's Geth & Tools download page, or build directly from the source. Because Bee needs Clef to sign many transactions automatically, we must run Clef as a service with relaxed permissions and rules set. To ensure Clef only signs transactions from Bee, we must protect the clef.ipc file by creating a Bee user and setting permissions so that it is only possible for this user to make use of the ipc socket. Additionally, Clef requires transaction signatures for the Bee's chequebook interaction. A shell script automating the post-initialisation permission changing and including the Clef config, clef-service, as well as the 4byte.json transaction signature file and rules.js file can all be found in the Bee-clef repository. Finally, once Clef is running, simply configure your Bee node to enable Clef using --clef-signer-enable and point Bee to the correct ipc socket using --clef-signer-endpoint. "},{"title":"Configuration","type":0,"sectionRef":"#","url":"docs/installation/configuration","content":"","keywords":""},{"title":"Configuration file","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#configuration-file","content":"Bee can also be configured by providing a yaml configuration file using the --config flag. bee start --config /home/<user>/bee-config.yaml Copy tip Run bee printconfig &> bee-default.yaml to print a default version of the configuration file. "},{"title":"Configuring Bee Installed Using a Package Manager","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#configuring-bee-installed-using-a-package-manager","content":"Bee node's installed using package managers apt-get or yum are configured using a configuration file which is automatically generated during the installation process. To alter Bee's configuration, simply edit the configuration file as desired, and restart your Bee node using systemctl. Linux# sudo vi /etc/bee/bee.yaml sudo systemctl restart bee Copy MacOS# vi /usr/local/etc/swarm-bee/bee.yaml brew services restart swarm-bee Copy "},{"title":"Automatically generate a config file","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#automatically-generate-a-config-file","content":"Configuration files can be easily generated by simply substituting the start command with printconfig when starting Bee using the command line. Example# Here we substitute start for printconfig when specifying arguments at the command line. bee printconfig \\ --verbosity=5 \\ &> bee-config.yaml Copy This produces the following file contents, showing the default configuration of Bee, with some added log verbosity: api-addr: :1633 bootnode: - /dnsaddr/bootnode.ethswarm.org bootnode-mode: false clef-signer-enable: false clef-signer-endpoint: \"\" clef-signer-ethereum-address: \"\" cors-allowed-origins: [] data-dir: /Users/sig/.bee db-block-cache-capacity: \"33554432\" db-capacity: \"5000000\" db-disable-seeks-compaction: false db-open-files-limit: \"200\" db-write-buffer-size: \"33554432\" debug-api-addr: :1635 debug-api-enable: false gateway-mode: false global-pinning-enable: false help: false nat-addr: \"\" network-id: \"1\" p2p-addr: :1634 p2p-quic-enable: false p2p-ws-enable: false password: \"\" password-file: \"\" payment-early: \"1000000000000\" payment-threshold: \"10000000000000\" payment-tolerance: \"50000000000000\" resolver-options: [] standalone: false swap-enable: true swap-endpoint: http://localhost:8545 swap-factory-address: \"\" swap-initial-deposit: \"100000000000000000\" tracing-enable: false tracing-endpoint: 127.0.0.1:6831 tracing-service-name: bee verbosity: info welcome-message: \"\" Copy "},{"title":"Configuration Options","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#configuration-options","content":"Bee provides the following options to customise your node. "},{"title":"Global","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#global","content":"--config# default /home/<user>/.bee.yaml The location of a yaml configuration file containing configuration instructions. See configuration. "},{"title":"Start","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#start","content":"--api-addr# default :1633 The ip and port the API will serve http requests from. Ommiting the IP part of the address will cause the server to listen to all interfaces. Argument values are of the form '132.132.132.132:1633'. --bootnode# default /dnsaddr/bootnode.ethswarm.org This is a multiaddr specifying the Bee bootnodes used for bootstrapping the network, it can be multiple values. By default a node connects to the Swarm mainnet. When using a private or test network, network specific bootnodes must be set. Any Bee node in a network can act as a bootnode. --clef-signer-enable# default false Set this to true to enable signing using Ethereum's 'Clef' external signer. Clef is an new feature which requires a corresponding rules files or running in advanced mode to allow for auto-signing of handshakes and cheques. --clef-signer-endpoint# default default path for clef for each host operating system You may also specify a custom ipc file path for your Clef signer. --clef-signer-ethereum-address# default selects the clef address at index 0 Use this command to specify which Bee Clef address is used if you have imported multiple keys into Bee Clef. warning If you have multiple addresses imported into your instance of Bee Clef, you must specify your address for each node, including the first one, as addresses may been re-ordered during import. --cors-allowed-origins# default [] Http/WS origin domains or wildcards defining these, which the API will allow responses to, e.g. bee start --cors-allowed-origins=\"*\" bee start --cors-allowed-origins=\"https://website.ethswarm.org\" Copy --data-dir# default /home/<user>/.bee The location on your disk where Bee stores its data. This consists of the following three types of data. Data in this directory will be required to restore a node state using the same key. 1. Chunk Data# This consists of chunks and files that you have pinned locally, cached chunks you have requested, or chunks within your radius of responsibility which you are responsible for serving to your peers. 2. State Data# This is information about the local state of your Bee node and should be backed up. 3. Keystore Data# These files contain encrypted versions of your private key and should be backed up and kept private. danger Keep the key files in your keystore data directory safe! They are the cryptographic proof of your network identity and cannot be recovered. --db-capacity# default 5000000 Chunk database capacity in chunks. A chunk is 4096 bytes in size, so the total database capacity in kb can be estimated as db-capacity * 4096. The default 5,000,000 chunks is therefore approximately 20.5gb. We recommend a minimum of 2.5gb capacity for a node to be able to effectively function in the network. Light nodes that do not participate in storing may be able to specify less. The below four options expose low-level configurations for LevelDB method Openfile. Please let us know how you get on with tweaking these settings on your hardware in the #swarm-infrastructure channel on our Discord server --db-block-cache-capacity# default 33554432 Corresponds to LevelDB BlockCacheCapacity (see above) --db-disable-seeks-compaction# default false Corresponds to LevelDB DisableSeeksCompaction (see above) --db-open-files-limit# default 200 info To accomodate less powerful hardware and operating systems, the open-files-limit is set deliberately low. We recommend that you try to increase it to nearer 10000 or more if this is possible when using your hardware. Please let us know how you get on with tweaking these settings on your hardware in the #swarm-infrastructure channel on our Discord server Corresponds to LevelDB OpenFilesCacheCapacity (see above) --db-write-buffer-size# default 33554432 Corresponds to LevelDB WriteBuffer (see above) --debug-api-addr# default :1635 The IP and port the Debug API will serve http requests from. Ommiting the IP part of the address will cause the server to listen to all requests. --debug-api-enable must be set to true. --debug-api-enable# default false Set this to true to enable access to the Debug API --gateway-mode# default false Set this to true to disable a set of sensitive features in the API to ensure that it is safe to expose your api-addr to the public internet. --global-pinning-enable# default false Enables the Global Pinning functionality when set to true. --nat-addr# default \"\" Sets the expected public IP. Normally this is generated automatically, but in certain circumstances it may be desirable to set it manually. --network-id# default 1 The network ID for which to accept new connections. Set to 1 for mainnet, 2 for testnet. --p2p-addr# default :1634 The ip and port to listen for p2p protocol messages. --p2p-quic-enable# default false --p2p-ws-enable# default false Enables web-sockets transport for p2p communications. --password# default \"\" Password used to decrypt Swarm identity keys. danger Passing passwords as command line arguments is insecure. Use a password file or environment variable in production environments. --password-file# default \"\" The path to a file that contains password for decrypting keys. The empty string assumes no file is presented. --payment-early# default 1000000000000 Amount in BZZ below the peers payment threshold which causes Bee to initiate settlement. --payment-threshold# default 10000000000000 The threshold in BZZ where you expect to get paid from your peers. --payment-tolerance# default 50000000000000 The excess debt above payment threshold in BZZ where you disconnect from your peer. --resolver-options# default eth:0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e@localhost:8545 ENS API endpoint for a TLD, with contract address. Multiple values can be provided. Settings should be provided in the format [tld:][contract-addr@]url A default top level domain and resolver contract address are provided, but an ENS/Geth endpoint must be provided to enable this functionality. --standalone# default false Set this flag if we would like the node not to try to connect to the network. Useful for development. --swap-enable# default true --swap-endpoint# default http://localhost:8545 SWAP ethereum blockchain endpoint. --swap-factory-address# default anointed contract for the current blockchain id --swap-initial-deposit# default 100000000000000000 --tracing-enable# default false Send tracing spans to the tracing service. More information how to configure and visualize tracing data is available on /docs/bee-developers/useful-dev-info#tracing. --tracing-endpoint# default 127.0.0.1:6831 The URL where the tracing service listens for Thrift protocol UDP messages. --tracing-service-name# default bee Bee service identifier in tracing spans. --verbosity# default info 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=trace --welcome-message# default \"\" Custom welcome message to be displayed to peers on succesful connection. "},{"title":"Environment variables","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#environment-variables","content":"Bee config may also be passed using environment variables. Environment variables are set as variables in your operating systems session or systemd configuration file. To set an environment variable, type the following in your terminal session. export VARIABLE_NAME=variableValue Copy Verify if it is correctly set by running echo $VARIABLE_NAME. All available configuration options are also available as prefixed, captilised and underscored environment variables. e.g. --api-addr becomes BEE_API_ADDR. "},{"title":"Precedence Order of Configuration","type":1,"pageTitle":"Configuration","url":"docs/installation/configuration#precedence-order-of-configuration","content":"Configuration is processed in the following ascending priority order of preference: Command Line VariablesEnvironment VariablesConfiguration File "},{"title":"Connectivity","type":0,"sectionRef":"#","url":"docs/installation/connectivity","content":"","keywords":""},{"title":"Networking Basics","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#networking-basics","content":"In a network, each computer is assigned an IP. Each IP is then subdivided into thousands of sockets or ports, each of which has an incoming and outgoing component. In a completely trusted network of computers, connections to or from any of these ports are allowed. However, to protect ourselves from nefarious actors when we join the wider internet, it is sometimes important to filter this traffic so that some of these ports are off limits to the public. In order to allow other Bee nodes we have previously not met to be able to send messages to our p2p port, usually 1634, we must ensure that our network is set up to receive incoming connections. info There are also some ports which you should never expose to the outside internet. Make sure that your api-addr, usually port 1633 is only exposed in Gateway Mode and your --debug-api-addr, usually 1635 is never exposed to the internet. It is good practice to employ one or more firewalls which block traffic on every port except for those for whom you are expecting it. "},{"title":"Your IP","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#your-ip","content":"When you connect to the internet, you are assigned a unique number called an IP Address. IP stands for Internet Protocol. The most prevalent IP version used is still the archaic IPv4 which was invented way back in 1981. IPv6 is available but not well used. Due to the mitigation of the deficiencies within this standard, we may encounter some complications. "},{"title":"Datacenters and Computers Connected Directly to the Internet","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#datacenters-and-computers-connected-directly-to-the-internet","content":"If you are renting space in a datacenter, the chances are that your computer will be connected directly to the real internet. This means that the IP of your networking interface will be directly set to be the same as your public IP. You can investigate this by running: ifconfig Copy or ip address Copy Your output should contain something like: eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 178.128.196.191 netmask 255.255.240.0 broadcast 178.128.207.255 Copy Here we can see our computer's public IP 178.128.196.191. This is the address that is used by other computers we connect to over the internet. We can verify this using a third party service such as icanhazip. curl icanhazip.com Copy 178.128.196.191 Copy If these numbers correspond, congratulations! You may skip the next section! "},{"title":"Home, Commercial and Business Networks and Other Networks Behind NAT","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#home-commercial-and-business-networks-and-other-networks-behind-nat","content":"To address the scarcity of IP numbers, Network Address Translation (NAT) was implemented. This approach creates a smaller, private network which many devices connect to in order to share a public IP. Traffic destined for the internet at large is then mediated by another specialised computer. In the cases of the a home network, this computer is the familiar home router, normally also used to provide a wifi network. If we run the above commands to find the computer's IP in this scenario, we will see a different output. ip address Copy en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500 ... inet 192.168.0.10 netmask 0xffffff00 broadcast 192.168.0.255 ... Copy Here we can see that, instead of the public IP, we can see that our computers IP is 192.168.0.10. This is part of the IP address space that the Internet Engineering Task Force has designated for private networks. As this IP won't work on the global internet, our router remembers that our computer has been assigned this IP. It then uses Network Address Translation to modify all requests from our computer to another computer somewhere in the internet. As the requests pass through the router it changes our local IP to the public IP of the router, and vice versa when the responses are sent back, from the public IP to the local one. Navigating Through the NAT# The presence of Network Address Translations presents two problems for p2p networking. The first is that it can be difficult for programs running on our computer to know our real public IP as it is not explicitly known by our computer's networking interface, which is configured with a private network IP. This is a relatively easy problem to solve as we can simply discover our public IP and then specify it in Bee's configuration, or indeed determine it using other means. The second issue is that our router has only 65535 ports to expose to the public network, however, each device on your private network is capable of exposing 65535 each. To the global internet, it appears that there is only one set of ports to connect to, whereas, in actual fact, there is a full set of ports for each of the devices which are connected to the private network. To solve this second problem, routers commonly employ an approach known as port forwarding. Bee's solution to these problems come in two flavours, automatic and manual. Automatic: Universal Plug and Play (UPNP)# UPNP is a protocol designed to simplify the administration of NAT and port forwarding by the end user by providing an API which software running within the network can use to ask the router for the external IP and to request for ports to be forwarded to the internal IP of the computer running the software. UPNP is a security risk! UPNP is a security risk as it allows any host or process inside (sometimes also outside) your network to open arbitrary ports which may be used to transfer malicious traffic, for example a RAT. UPNP can also be used to determine your IP, and in the case of using Tor or a VPN, your real public IP. be We urge you to disable UPNP on your router and use manual port forwarding as described below. Bee will use UPNP to determine your public IP, which is required for various internal processes. In addition to this, a request will be sent to your router to ask it to forward a random one of its ports, which are exposed directly to the internet, to the Bee p2p port (usually 1634) which your computer is exposing only to the private network. Doing this creates a tunnel through which other Bee's may connect to your computer safely. If you start your Bee node in a private network with UPNP available, the output of the addresses endpoint of your debug API will look something like this: [ \"/ip4/127.0.0.1/tcp/1634/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\", \"/ip4/192.168.0.10/tcp/1634/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\", \"/ip6/::1/tcp/1634/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\", \"/ip4/86.98.94.9/tcp/20529/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\" ] Copy Note that the port in the external multiaddress is the router's randomly selected 20529 which is forwarded by the router to 192.168.0.10:1634. Manual: Configure Your Router and Bee# Inspecting the underlay addresses in the output of the addresses endpoint our debug API, we can see addresses only for localhost 127.0.0.1 and our private network IP 192.168.0.10. Bee must be having trouble navigating our NAT. [ \"/ip4/127.0.0.1/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip4/192.168.0.10/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip6/::1/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", ] Copy To help fix the first problem, let's determine our public IP. curl icanhazip.com Copy 86.98.94.9 Copy Now we can simply supply this IP in our Bee configuration on startup. Solving our second problem is a little more difficult as we will need to interact with our router's firmware, which is a little cranky. Each router is different, but the concept is usually the same. Log in to your router by navigating your browser to your router's configuration user interface, usually at http://192.168.0.1. You will need to log in with a password. Sadly, passwords are often left to be the defaults, which can be found readily on the internet. Once logged in, find the interface to set up port forwarding. The Port Forward website provides some good information, or you may refer to your router manual or provider. Here, we will then set up a rule that forwards port 1634 of our internal IP 192.168.0.10 to the same port 1634 of our external IP. Now, when requests arrive at our external address 86.98.94.9:1634 they are modified by our router and forwarded to our internal IP and port 192.168.0.10:1634. Sometimes this can be a little tricky, so let's verify we are able to make a TCP connection using netcat. First, with Bee not running, let's set up a simple TCP listener using Netcat on the same machine we would like to run Bee on. nc -l 0.0.0.0 1634 Copy nc -zv 86.98.94.9 1634 Copy Connection to 86.98.94.9 port 1834 [tcp/*] succeeded! Copy Success! ‚ú® If this didn't work for you, check out our Debugging Connectivity guide below. If it did, let's start our Bee node with the --nat-addr configured. bee start --nat-addr 86.98.94.9:1634 Copy Checking our addresses endpoint again, we can now see that Bee has been able to successfully assign a public address! Congratulations, your Bee is now connected to the outside world! [ \"/ip4/127.0.0.1/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip4/192.168.0.10/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip6/::1/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip4/86.98.94.9/tcp/1634/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\" ] Copy info If you are regularly connecting and disconnecting to a network, you may also want to use your router's firmware to configure the router to reserve and only assign the same local network IP from its DHCP pool to your computer's MAC address. This will ensure that your Bee seamlessly connects when you rejoin the network! "},{"title":"Debugging Connectivity","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#debugging-connectivity","content":"The above guide navigates your NAT, but there are still a few hurdles to overcome. To make sure there is a clear path from your computer to the outside world, let's follow our Bee's journey from the inside out. Let's set up a Netcat listener on all interfaces on the computer we'd like to run Bee on as we have above. nc -l 0.0.0.0 1634 Copy Now, let's verify we're above to test this by checking the connection on our local machine. nc -zv 127.0.0.1 1634 Copy Connection to 127.0.0.1 port 1634 [tcp/*] succeeded! Copy This should be a no brainer, the connection between localhost in not normally mediated. If there is a problem here, the problem is with some other software running on your operating system or your operating system itself. Try a different port, such as 1734 and turning off any unneccesary software. If this doesn't work, you may need to try a different operating system environment. Please get in touch and we'll try to help! If we were successful, let's move on to the next stage. info If you are not able to get access to some firewall settings, or otherwise debug incoming connectivity, don't worry! All is not lost. Bee can function just fine with just outgoing connections. However, if you can, it is worth the effort to allow incoming connections, as this benefits the whole of the swarm. Let's find out what our IP looks like to the internet. curl icanhazip.com Copy 86.98.94.9 Copy Now try to connect to your port using the global IP. nc -zv 86.98.94.9 1634 Copy If this is successful, our Bee node's path is clear! If not, we can try a few things to make sure there are no barriers stopping us from getting through. Check your computers firewall. Sometimes your computer is configured to prevent connections. If you are on a private network mediated by NAT, you can check if this is the problem by trying to connect from another device on your network using the local IP nc -zv 192.168.0.10 1634. Ubuntu uses UFW, MacOS can be configured using the Firewall tab in the Security & Privacy section of System Preferences. Windows uses Defender Firewall. For each of these firewalls, set a special rule to allow UDP and TCP traffic to pass through on port 1634. You may want to limit this traffic to the Bee application only. Check your ingress firewall. For a datacenter hired server, this configuration will often take place in somewhere in the web user interface. Refer to your server hosting provider's documentation to work out how to open ports to the open internet. Ensure that both TCP and UDP traffic are allowed. Similarly, if you are connecting from within a private network, you may find that the port is blocked by the router. Each router is different, so consult your router's firware documentation to make sure there are no firewalls in place blocking traffic on your Bee's designated p2p port. You may check this using Netcat by trying to connect using your computer's public IP, as above nc -zv 86.98.94.9 1634. Docker Docker adds another level of complexity. To debug docker connectivity issues, we may use netcat as above to check port connections are working as expected. Double check that you are exposing the right ports to your local network, either by using the command line flags or in your docker-compose.yaml. You should be able to successfully check the connection locally using eg. nc -zv localhost 1634 then follow instructions above to make sure your local network has the correct ports exposed to the internet. Something else entirely? Networking is a complex topic, but it keeps us all together. If you still can't connect to your Bee, get in touch via The Beehive and we'll do our best to get you connected. In the swarm, no Bee is left behind. "},{"title":"Bee Using Docker","type":0,"sectionRef":"#","url":"docs/installation/docker","content":"","keywords":""},{"title":"Quick Start","type":1,"pageTitle":"Bee Using Docker","url":"docs/installation/docker#quick-start","content":"Try Bee out by simply running the following command in your Terminal. docker run\\ -p 1635:1635 \\ -p 1634:1634 \\ -p 1633:1633\\ --rm -it ethersphere/bee:latest\\ start \\ --welcome-message=\"Bzzzz bzzz bzz bzz. üêù\" \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Copy info If starting your node for the first time, you will need to deploy a chequebook contract. See Manual Installation for more info. To persist files, mount a local directory as follows and enter the password used to encrypt your keyfiles. Note, Docker insists on absolute paths when mounting volumes, so you must replace /path/to/.bee-docker with a valid path from your local filesystem. docker run\\ -v /path/to/.bee-docker:/home/bee/.bee\\ -p 1635:1635 \\ -p 1634:1634 \\ -p 1633:1633\\ --rm -it ethersphere/bee:latest\\ start \\ --welcome-message=\"Bzzzz bzzz bzz bzz. üêù\" \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Copy Once you have generated your keys, leave Bee to run in the background... docker run\\ -d -v /path/to/.bee-docker:/home/bee/.bee\\ -p 1635:1635 \\ -p 1634:1634 \\ -p 1633:1633\\ --rm -it ethersphere/bee:latest\\ start \\ --welcome-message=\"Bzzzz bzzz bzz bzz. üêù\" \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Copy "},{"title":"Versions","type":1,"pageTitle":"Bee Using Docker","url":"docs/installation/docker#versions","content":"Other versions of the Bee container are also available. Latest Beta Release# docker pull ethersphere/bee:beta Copy Specific Versions# docker pull ethersphere/bee:0.5.3 Copy Edge# docker pull ethersphere/bee:latest Copy Please see the Docker Hub repository for more information. "},{"title":"Docker Compose","type":1,"pageTitle":"Bee Using Docker","url":"docs/installation/docker#docker-compose","content":"Configuration files for Bee and Bee Clef are provided to enable quick and easy installation of both projects with persistent storage and secure secret management. To install Bee without Clef, simply omit the relevant steps. Setup# First, retrieve the current docker-compose.yaml file. wget -q https://raw.githubusercontent.com/ethersphere/bee/v0.5.3/packaging/docker/docker-compose.yml Copy Next, create a .env file using the example file provided. This file will be responsible for storing configuration and secrets for our Bee and Bee Clef applications. wget -q https://raw.githubusercontent.com/ethersphere/bee/v0.5.3/packaging/docker/env -O .env Copy There are some important configuration parameters which must be set in order for our projects to work. To affect configuration in the .env file, we first remove the # at the beginning of the line and then change the value after = to our desired config. For Bee, amend the following parameters: BEE_SWAP_ENDPOINT=https://rpc.slock.it/goerli BEE_PASSWORD=my-password Copy To enable Clef support, we must also change the following params: CLEF_CHAINID=5 Copy BEE_CLEF_SIGNER_ENABLE=true BEE_CLEF_SIGNER_ENDPOINT=http://clef-1:8550 Copy With the configuration settings complete, run docker-compose up with the -d flag to run Bee and Bee Clef as a daemon. docker-compose up -d Copy warning Docker Compose will create a Docker Volume called bee containing important key material. Make sure to use to backup the contents of your Docker volume! Next we must fund our node using the Swarm Goerli Faucet. To determine our address to fund, we can check the logs for our Bee container: docker-compose logs -f bee-1 Copy And look for the lines including your automatically generated Ethereum address (scroll right). bee_1 | time=\"2020-12-15T18:43:14Z\" level=warning msg=\"please make sure there is sufficient eth and bzz available on 7a977fa660e2e93e1eba40030c6b8da68d01971e\" time=\"2020-12-15T18:43:14Z\" level=warning msg=\"on goerli you can get both goerli eth and goerli bzz from https://faucet.ethswarm.org?address=7a977fa660e2e93e1eba40030c6b8da68d01971e\" Copy Now, naviate to the https://faucet.ethswarm.org, enter your Ethereum address and submit the form to receive a supply of test Goerli Eth and Goerli BZZ. After your transaction has been completed, your node should recognise that your wallet has been funded, and begin to deploy and fund your Bee chequebook! Once Bee has completed this procedure, you may query the Bee HTTP API at http://localhost:1633. curl localhost:1633 Copy Ethereum Swarm Bee Copy Congratulations! Your Bee is up and running! üêù "},{"title":"Manual Installation","type":0,"sectionRef":"#","url":"docs/installation/manual","content":"","keywords":""},{"title":"Quick Install (Stable)","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#quick-install-stable","content":"We provide a convenient installation script, which automatically detects your execution environment and installs the latest stable version of the Bee client on your computer. If your system is not supported, you might want to try to build directly from source. To install the binary using our quick install script, run either one of the following commands in your Terminal... wget# wget -q -O - https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | TAG=v0.5.3 bash Copy curl# curl -s https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | TAG=v0.5.3 bash Copy "},{"title":"Bee Clef External Signer","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#bee-clef-external-signer","content":"We recommend that Swarm node implementations make use of Go Ethereum's Clef external signer. Instructions of installing and integrating this with Bee can be found here. "},{"title":"Run Bee","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#run-bee","content":"Once you have installed Bee, you can test that it has been successfully installed by running. bee version Copy 0.5.2 Copy Now your Bee node is installed, you can fund your node with gBZZ join us in the swarm! üêù üêù üêù üêù üêù With Bee installed, simply type bee start in your Terminal. This command will start Bee for the first time and prompt you to create your Bee wallet. "},{"title":"Create Your Wallet","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#create-your-wallet","content":"When you first run Bee, you will be asked to input a user password. It is important to choose a strong unique password, as this will protect your valuable private key which is generated during startup. This secret key is stored encrypted in your Bee data directory (usually ~/.bee). It represents your Swarm Address - your anonymous identity in Swarm. bee start > Welcome to the Swarm.... Bzzz Bzzzz Bzzzz \\ / \\ o ^ o / \\ ( ) / ____________(%%%%%%%)____________ ( / / )%%%%%%%( \\ \\ ) (___/___/__/ \\__\\___\\___) ( / /(%%%%%%%)\\ \\ ) (__/___/ (%%%%%%%) \\___\\__) /( )\\ / (%%%%%) \\ (%%%) ! Password: Copy "},{"title":"SWAP Bandwidth Incentives","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#swap-bandwidth-incentives","content":"SWAP mode is now enabled by default for testing on Swarm mainnet, you must include configuration parameters specifying a valid Goerli Testnet RPC endpoint. You can run your own Goerli node, or use a RPC provider such as rpc.slock.it/goerli or Infura. When running your Bee node with SWAP enabled for the first time, your Bee node will deploy a 'chequebook' contract using the canonical factory contract which is deployed by Swarm. A factory is used to ensure every node is using legitimate and verifiable chequebook contracts. Once the chequebook is deployed, Bee will deposit a certain amount of gBZZ (Goerli BZZ tokens) in the chequebook contract so that it can pay other nodes in return for their services. In order to interact with the Goerli blockchain to deploy contracts and make payments, we must fund our account with Goerli ETH (GETH), and to make payments in return for services our account must also own some Goerli BZZ (gBZZ). We can get both tokens for trial purposes from the Swarm Goerli Faucet. To find out your Ethereum address, we can simply run our Bee node and point it at the Goerli rpc endpoint. bee start \\ --verbosity 5 \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Copy Since we haven't yet funded our account, we will see a message in our logs asking us to fund our Ethereum account. Navigate to the Swarm Goerli Faucet and submit your address, ensuring it is prepended with the characters 0x to the faucet, fill out the recaptcha and wait for confirmation that your gETH and gBZZ have been dispensed. Now, we can run our Bee node and we will start to see Bee creating and waiting for transactions to complete. Please be patient as this might take a few moments. INFO[2020-09-28T14:59:38+01:00] no chequebook found, deploying new one. INFO[2020-09-28T14:59:39+01:00] deploying new chequebook in transaction 5c2949675b49d069c4c5755e1901aa59fa4224ea2a763efe78a5293f36e04370 INFO[2020-09-28T14:59:57+01:00] deployed chequebook at address a22c864fe5bd53cc3ae130709647a0e60e67f714 INFO[2020-09-28T14:59:57+01:00] depositing 100000000 token into new chequebook INFO[2020-09-28T14:59:57+01:00] sent deposit transaction c25714a0569131707513c68f6108553bb861131253230a606a26d390e790e0f1 INFO[2020-09-28T15:00:12+01:00] successfully deposited to chequebook Copy Now our chequebook is deployed, and credited with an initial deposit of gBZZ ready to be given to reward our fellow busy Bee nodes for their services. You will also provide services, and be rewarded by your peers for services you provide for them. For more info on bandwidth accounting, see SWAP Bandwidth Accounting. "},{"title":"Join the Swarm","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#join-the-swarm","content":"If all goes well, you will see your node automatically begin to connect to other Bee nodes all over the world. INFO[2020-08-29T11:55:16Z] greeting <Hi I am a very buzzy bee bzzzz bzzz bzz. üêù> from peer: b6ae5b22d4dc93ce5ee46a9799ef5975d436eb63a4b085bfc104fcdcbda3b82c Copy Now your node will begin to request chunks of data that fall within your radius of responsibilty - data that you will then serve to other p2p clients running in the swarm. Your node will then begin to respond to requests for these chunks from other peers, for which you will soon be rewarded in BZZ. Incentivisation In Swarm, storing chunks of data, serving and forwarding them to other nodes earns you rewards! Read about incentives in SWAP for more info. Your Bee client has now generated an elliptic curve keypair similar to an Ethereum wallet. These are stored in your data directory, in the keys folder. Keep Your Keys and Password Safe! Your keys and password are very important, back these files up and store them in a secure place that only you have access to. With great privacy comes great responsibility - while no-one will ever be able to guess your key, but you will not be able to recover them if you lose them either, so be sure to look after them well and keep secure backups. "},{"title":"Getting help","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#getting-help","content":"The CLI has documentation built-in. Running bee gives you an entry point to the documentation. Running bee start -h or bee start --help will tell you how you can configure you bee node via the command line arguments. You may also check out the configuration guide, or simply run your Bee terminal command with the --help flag, eg. bee start --help or bee --help. "},{"title":"Upgrading Bee","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#upgrading-bee","content":"To upgrade previous versions of Bee installed using the above method, simply re-run the installation command above. "},{"title":"Edge (Unstable)","type":1,"pageTitle":"Manual Installation","url":"docs/installation/manual#edge-unstable","content":"To get a sneak preview of the latest features added to Bee, you may also install the Edge version, which tracks the master branch of the Github respository wget# wget -q -O - https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | bash Copy curl# curl -s https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | bash Copy "},{"title":"Quick Start","type":0,"sectionRef":"#","url":"docs/installation/quick-start","content":"","keywords":""},{"title":"Install Bee Clef","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#install-bee-clef","content":"info While it is not necessary that node operators make use of Go Ethereum's Clef external signer to manage your Ethereum key pair. Follow these instructions include and integrate Bee-clef alongside Bee to help keep your keys safe! Before installing Bee, it is recommended that you first install the Bee clef package. This will set up a Bee specific instance of the Go-Ethereum Clef signer which will be integrated with your Bee node. caution If choosing to use Bee-clef, you must install this before you install Bee. "},{"title":"Install Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#install-bee","content":"To install Bee itself, simply choose the appropriate command from the ones below. This will set up Bee and start running it in the background as a service on your computer. info Follow post install guide in terminal for initial configuration and how to start bee. Ubuntu / Debian / RaspbianCentOSMacOS AMD64# wget https://github.com/ethersphere/bee/releases/download/v0.5.3/bee_0.5.3_amd64.deb sudo dpkg -i bee_0.5.3_amd64.deb Copy ARM (Raspberry Pi)# ARMv7# wget https://github.com/ethersphere/bee/releases/download/v0.5.3/bee_0.5.3_armv7.deb sudo dpkg -i bee_0.5.3_armv7.deb Copy ARM64# wget https://github.com/ethersphere/bee/releases/download/v0.5.3/bee_0.5.3_arm64.deb sudo dpkg -i bee_0.5.3_arm64.deb Copy "},{"title":"SWAP Blockchain Endpoint","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#swap-blockchain-endpoint","content":"Your Bee node must have access to the Ethereum blockchain, so that it can interact and deploy your chequebook contract. You can run yourown Goerli node, or use a provider such as rpc.slock.it/goerli orInfura. By default, Bee expects a local Goerli node at http://localhost:8545. To use a provider instead, simply change your --swap-endpoint in your configuration file. "},{"title":"Interact With Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#interact-with-bee","content":"Once Bee has been installed, it will start up as a systemd service, and once it has been funded, its HTTP basedAPI will start listening atlocalhost:1633. curl localhost:1633 Copy Ethereum Swarm Bee Copy "},{"title":"Linux","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#linux","content":"We can now manage the Bee service using systemctl. systemctl status bee Copy ‚óè bee.service - Bee - Ethereum Swarm node Loaded: loaded (/lib/systemd/system/bee.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2020-11-20 23:50:15 GMT; 6s ago Copy Logs are available using the journalctl command: journalctl --lines=100 --follow --unit bee Copy INFO[2021-02-09T18:55:11Z] swarm public key 03379f7aa673b7f03737064fd23ba1453619924a4602e70bbccc133ba67d0968bd DEBU[2021-02-09T18:55:11Z] using existing libp2p key DEBU[2021-02-09T18:55:11Z] using existing pss key INFO[2021-02-09T18:55:11Z] pss public key 03bae655ce94431e1f2c2de8d017f88c8c5c293ef0057379223084aba9e318596e INFO[2021-02-09T18:55:11Z] using ethereum address 99c9e7868d22244106a5ffbc2f5d6b7c88e2c85a INFO[2021-02-09T18:55:14Z] using default factory address for chain id 5: f0277caffea72734853b834afc9892461ea18474 INFO[2021-02-09T18:55:14Z] no chequebook found, deploying new one. WARN[2021-02-09T18:55:15Z] cannot continue until there is sufficient ETH (for Gas) and at least 10 BZZ available on 99c9e7868d22244106a5ffbc2f5d6b7c88e2c85a WARN[2021-02-09T18:55:15Z] get your Goerli ETH and Goerli BZZ now via the bzzaar at https://bzz.ethswarm.org/?transaction=buy&amount=10&slippage=30&receiver=0x99c9e7868d22244106a5ffbc2f5d6b7c88e2c85a Copy "},{"title":"MacOS","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#macos-1","content":"Services are managed using Homebrew services. brew services restart swarm-bee Copy Logs are available at /usr/local/var/log/swarm-bee/bee.log tail -f /usr/local/var/log/swarm-bee/bee.log Copy "},{"title":"Fund Your Node","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#fund-your-node","content":"A SWAP enabled Bee node requires both gETH and gBZZ to begin operation. The current version of Swarm incentives is running on the Ethereum Goerli testnet. To acquire free gBZZ tokens visit the Bzzaar and follow the following steps! 1. Find your Bee node's address.# To find a Bee node's Ethereum address you can: look into its logs (see above),use the handy bee-get-addr utility, bee-get-addr Copy WARN[2021-02-09T18:55:15Z] get your Goerli ETH and Goerli BZZ now via the bzzaar at https://bzz.ethswarm.org/?transaction=buy&amount=10&slippage=30&receiver=0x99c9e7868d22244106a5ffbc2f5d6b7c88e2c85a Copy curl -s localhost:1635/addresses | jq .ethereum Copy send a request to our Bee node'sdebug API endpoint called addresses. \"0x97a472ff3a28a2e93ef4d2f523ff48e39c4bf579\" Copy 2. Come to the Bzzaar and buy some gBZZ!# You can get to the Bzzaar by navigating to the link shown in your logs. It should look something like this, note that the Ethereum address of your node is prefilled in the receiver query parameter. https://bzz.ethswarm.org/?transaction=buy&amount=10&slippage=30&receiver=0xbee467355... Make sure that your Bee node's correct address is displayed above the transaction modal. You are minting to receiver - 0xbee467355... 3. Connect your wallet, we recommend Metamask or Portis.# 3. Click the GET G-ETH button in the bottom left hand corner of your screen.# 4. Wait for the Goerli ETH to arrive in your wallet.# We will send a small amount of gETH to both your connected wallet, and your Bee's wallet! This can take a couple of minutes, check the faucet address on Etherscan and look for the transactions to your addresses. You may need to reconnect your wallet to see your balance increase once the transaction has completed. 5. Once you have balance, enter at least 10 in the gBZZ field, you may even have enough gETH to buy a little more!# This is another blockchain transaction, minutes check Metamask to see how your transaction is getting on. 6. When your transaction is complete, your Bee node should be the proud owner of some freshly minted gBZZ!# 7. Check your Bee node, it should now begin deploying your checkbook contract.# If your node has stopped polling for updates, you may now need to restart it. Once your Bee node is fully loaded with gBZZ, we can now watch our logs and watch as Bee automatically deploys a chequebook and makes an initial deposit. journalctl --lines=100 --follow --unit bee Copy Once this is complete, we should start to see our Bee node connect to other nodes in the network as it begins to take part in the swarm. ... Nov 20 23:52:44 sig-ln bee[55528]: time=\"2020-11-20T23:52:44Z\" level=info msg=\"greeting <Welcome to the Swarm, you are Bee-ing connected!> from peer: a0c8fb41346b877b87e7aa31b109a9eef1f38f476304631f4962407b732e3db0\" ... Copy info The Bzzaar is brand new. If you have any issues, please get in touch and let us know! You may also visit our legacy Goerli faucet at https://faucet.ethswarm.org and fill out the form with your Bee node's address to receive your nodes initial supply of gBZZ and GETH. If these messages are missing, check out our comprehensive guide to Bee connectivity. "},{"title":"Upgrading Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#upgrading-bee","content":"Ubuntu / Debian / Raspbian# To upgrade Bee, simply stop the Bee service. sudo systemctl stop bee Copy Now follow the steps above to download the new package and install the new version, as usual. You may now start your node again. sudo systemctl start bee Copy Bee sure to backup your clef key material and Bee data before applying updates. "},{"title":"Uninstalling Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#uninstalling-bee","content":"If you need to remove Bee, you may simply run the below commands. "},{"title":"Ubuntu / Debian / Raspbian","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#ubuntu--debian--raspbian-1","content":"danger Uninstalling Bee will also delete Bee and Bee-clef data! Make sure you make backups so you don't lose your keys and data. sudo apt-get remove bee sudo apt-get remove bee-clef Copy "},{"title":"Centos","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#centos-1","content":"danger Uninstalling Bee will also delete Bee and Bee-clef data! Make sure you make backups so you don't lose your keys and data. sudo yum remove bee sudo yum remove bee-clef Copy "},{"title":"Data Locations","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#data-locations","content":""},{"title":"Bee-clef","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#bee-clef","content":"Configuration files are stored in /etc/bee-clef/ Key material and other data is stored in /var/lib/bee-clef/ "},{"title":"Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#bee","content":"Configuration files are stored in /etc/bee/ State, chunks and other data is stored in /var/lib/bee/ "},{"title":"Backups","type":0,"sectionRef":"#","url":"docs/maintenance/backups","content":"","keywords":""},{"title":"Bee","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#bee","content":"To restore a Bee node you must have the following directories, all backed up in an atomic moment so that they are syncronised. All of this data is contained within the data directory specified in your Bee configuration. "},{"title":"Ubuntu / Debian / Raspbian / CentOS Package Managers","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#ubuntu--debian--raspbian--centos-package-managers","content":"For Linux installations from package managers yum or apt, your data directory is located at: /var/lib/bee Copy It may be also useful for you to retain your configuration files, which are held at: /etc/bee Copy "},{"title":"Manual","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#manual","content":"For a manual installation your data directory is normally located at: ~/.bee Copy "},{"title":"Docker Compose","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#docker-compose","content":"When using our Docker Compose configuration files to run your node, Docker will create a volume for Bee and a volume for Bee Clef. You may use docker cp to retrieve the contents of these folders. docker cp bee_bee_1:/home/bee/.bee/ bee docker cp bee_clef_1:/app clef Copy "},{"title":"Data Types","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#data-types","content":"The Bee data directory contains three stores. "},{"title":"Keystore","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#keystore","content":"The keystore contains your important key material. This is the most important data by far, and is produced and retained from Bee's initialisation procedure. If you have used Bee-clef to manage your key material and signing procedures, see below for information on how to keep backups. "},{"title":"Statestore","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#statestore","content":"The statestore retains information related to your node, including SWAP balances, info on peers, blocklisting and much more. "},{"title":"Chunkstore","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#chunkstore","content":"The chunkstore contains chunks that are pinned in your node, or are in your neighbourhood of responsibility. "},{"title":"Clef","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#clef","content":"It is also important to back up Clef's stored data. This includes your sensitive key material, so make sure to keep this private and safe! "},{"title":"Ubuntu / Debian / Raspbian / CentOS Package Managers","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#ubuntu--debian--raspbian--centos-package-managers-1","content":"For Linux installations from package managers yum or apt, your Clef data directory is located at: /var/lib/bee-clef/ Copy Configuration files are stored in: /etc/bee-clef/ Copy "},{"title":"Manual","type":1,"pageTitle":"Backups","url":"docs/maintenance/backups#manual-1","content":"For a manual installation of Clef your data directory is normally located at: ~/.clef Copy "}]